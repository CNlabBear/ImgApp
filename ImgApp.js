// Generated by CoffeeScript 1.12.6

/**
 * Title  ImgApp<br>
 * Author  Tanaike<br>
 * GitHub  https://github.com/tanaikech/ImgApp<br>
 *<br>
 * Retrieve image size (width and height) from file blob.<br>
 *<br>
 * <h3>usage</h3>
 * var blob = DriveApp.getFileById(fileId).getBlob(); // Please retrieve file blob like this.<br>
 * var res = ImgApp.getSize(blob);<br>
 *<br>
 * @param {Object} blob File blob: png, jpg, gif and bmp
 * @return {Object} JSON object {identification: [png, jpg, gif and bmp], width: [pixel], height: [pixel], filesize: [bytes]}
 */
function getSize(blob) {
  return new ImgApp().GetSize(blob)
}

/**
 * Title  ImgApp<br>
 * Author  Tanaike<br>
 * GitHub  https://github.com/tanaikech/ImgApp<br>
 *<br>
 * Resize image from inputted width. When the source file is Google Docs (spreadsheet, document and slide),<br>
 * its thumbnail is created and it's resized.<br>
 * In order to use this method, please enable Drive API at Google API console.<br>
 *<br>
 * <h3>usage</h3>
 * var res = ImgApp.doResize(fileId, width);<br>
 * DriveApp.createFile(res.blob.setName("filename")); // If you want to save as a file, please use this.<br>
 *<br>
 * @param {string} fileId File ID on Google Drive
 * @param {integer} width Resized width you want
 * @return {Object} JSON object {blob: [blob], originalwidth: ###, originalheight: ###, resizedwidth: ###, resizedheight: ###}
 */
function doResize(fileId, width) {
  return new ImgApp().DoResize(fileId, width)
}
;
(function(r) {
  var ImgApp;
  ImgApp = (function() {
    var GetImage, GetResizedSize, byte2hex, byte2hex_num, byte2num, getFormat, getInfBMP, getInfGIF, getInfJPG, getInfPNG, hex2num;

    ImgApp.name = "ImgApp";

    function ImgApp(blob) {
      this.bytear = [];
    }

    ImgApp.prototype.DoResize = function(fileId, width) {
      var blob, e, mimetype, n, res, resized, rs, thumbUrl, turl;
      try {
        res = JSON.parse(UrlFetchApp.fetch("https://www.googleapis.com/drive/v3/files/" + fileId + "?fields=thumbnailLink%2CmimeType", {
          method: "GET",
          headers: {
            "Authorization": "Bearer " + ScriptApp.getOAuthToken()
          },
          muteHttpExceptions: true
        }).getContentText());
        thumbUrl = res.thumbnailLink;
        mimetype = res.mimeType;
        r = thumbUrl.split("=");
      } catch (error) {
        e = error;
        throw new Error("'" + fileId + "' is not compatible file.");
      }
      width = width > 0 ? width : 100;
      n = false;
      rs = {};
      if (~mimetype.indexOf('google-apps') || ~mimetype.indexOf('pdf')) {
        n = true;
        turl = thumbUrl.replace(r[r.length - 1], "s10000");
        rs = GetResizedSize.call(this, GetImage.call(this, turl, "png"), width);
      } else if (~mimetype.indexOf('image')) {
        rs = GetResizedSize.call(this, DriveApp.getFileById(fileId).getBlob(), width);
      } else {
        turl = thumbUrl.replace(r[r.length - 1], "s10000");
        rs = GetResizedSize.call(this, GetImage.call(this, turl, "png"), width);
      }
      blob = GetImage.call(this, thumbUrl.replace(r[r.length - 1], "s" + (n ? rs.reheight : rs.rewidth)));
      resized = this.GetSize(blob);
      return {
        blob: blob,
        identification: resized.identification,
        originalwidth: rs.orgwidth,
        originalheight: rs.orgheight,
        resizedwidth: resized.width,
        resizedheight: resized.height
      };
    };

    GetImage = function(turl) {
      return UrlFetchApp.fetch(turl, {
        headers: {
          Authorization: "Bearer " + ScriptApp.getOAuthToken()
        }
      }).getBlob();
    };

    GetResizedSize = function(blob, width) {
      var oh, ow, rh, rw, size;
      size = this.GetSize(blob);
      ow = size.width;
      oh = size.height;
      if (width > ow) {
        rw = ow;
        rh = oh;
      } else {
        rw = width;
        rh = Math.ceil(width * oh / ow);
      }
      return {
        orgwidth: ow,
        orgheight: oh,
        rewidth: rw,
        reheight: rh
      };
    };

    ImgApp.prototype.GetSize = function(blob) {
      var res;
      this.bytear = (function(blob) {
        var e;
        try {
          return blob.getBytes();
        } catch (error) {
          e = error;
          throw new Error("Cannot retrieve file blob.");
        }
      })(blob);
      getFormat.call(this);
      switch (this.format) {
        case "bmp":
          res = getInfBMP.call(this);
          break;
        case "gif":
          res = getInfGIF.call(this);
          break;
        case "png":
          res = getInfPNG.call(this);
          break;
        case "jpg":
          res = getInfJPG.call(this);
          break;
        default:
          res = {
            Error: this.format
          };
      }
      return res;
    };

    getInfBMP = function() {
      return {
        identification: "BMP",
        width: byte2num(this.bytear.slice(18, 22), true),
        height: byte2num(this.bytear.slice(22, 26), true),
        filesize: this.bytear.length
      };
    };

    getInfGIF = function() {
      return {
        identification: "GIF",
        width: byte2num(this.bytear.slice(6, 8), true),
        height: byte2num(this.bytear.slice(8, 10), true),
        filesize: this.bytear.length
      };
    };

    getInfPNG = function() {
      return {
        identification: "PNG",
        width: byte2num(this.bytear.slice(16, 20), false),
        height: byte2num(this.bytear.slice(20, 24), false),
        filesize: this.bytear.length
      };
    };

    getInfJPG = function() {
      var i, ma;
      i = 0;
      while (i < this.bytear.length) {
        i += 1;
        if ((byte2hex_num.call(this, this.bytear[i])) === "ff") {
          i += 1;
          ma = byte2hex_num.call(this, this.bytear[i]);
          if (ma === "c0" || ma === "c1" || ma === "c2") {
            break;
          } else {
            i += hex2num.call(this, byte2hex.call(this, this.bytear.slice(i + 1, i + 3)));
          }
        }
      }
      return {
        identification: "JPG",
        width: hex2num.call(this, byte2hex.call(this, this.bytear.slice(i + 6, i + 8))),
        height: hex2num.call(this, byte2hex.call(this, this.bytear.slice(i + 4, i + 6))),
        filesize: this.bytear.length
      };
    };

    getFormat = function() {
      var f;
      f = (byte2hex.call(this, this.bytear.slice(0, 8))).join("");
      this.format = f.slice(0, 16) === "89504e470d0a1a0a" ? "png" : f.slice(0, 4) === "ffd8" ? "jpg" : f.slice(0, 6) === "474946" ? "gif" : f.slice(0, 4) === "424d" ? "bmp" : "Cannot retrieve image size. Now, it can retrive image size from png, jpg, gif and bmp.";
    };

    byte2hex_num = function(data) {
      var conv;
      conv = (data < 0 ? data + 256 : data).toString(16);
      return conv.length == 1 ? "0" + conv : conv;
    };

    byte2hex = function(data) {
      var conv;
      conv = [(i < 0 ? i + 256 : i).toString(16) for each (i in data)];
      return [i.length == 1 ? "0" + i : i for each (i in conv)];
    };

    byte2num = function(data, byteorder) {
      var conv, datlen, j;
      if (byteorder) {
        datlen = data.length;
        conv = new Array(datlen);
        j = 0;
        for (var i=datlen-1; i>=0; i-=1){
                    var temp = (data[i] < 0 ? data[i] + 256 : data[i]).toString(16);
                    if (temp.length == 1) {
                        temp = "0" + temp;
                    }
                    conv[j] = temp;
                    j += 1;
                };
      } else {
        conv = byte2hex.call(this, data);
      }
      return hex2num.call(this, conv);
    };

    hex2num = function(data) {
      return parseInt(data.join(""), 16);
    };

    return ImgApp;

  })();
  return r.ImgApp = ImgApp;
})(this);
